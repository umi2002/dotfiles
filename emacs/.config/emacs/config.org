:PROPERTIES:
#+TITLE: umi's config
#+AUTHOR: umi
#+TOC: toc-org

* Umi's Config :TOC:
  - [[#editor-settings][EDITOR SETTINGS]]
  - [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#navigation][NAVIGATION]]
  - [[#project][PROJECT]]
  - [[#lsp][LSP]]
  - [[#utils][UTILS]]
  - [[#git][GIT]]
  - [[#visuals][VISUALS]]
  - [[#org][ORG]]

** EDITOR SETTINGS
[[file:settings.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "settings.org"
    user-emacs-directory))
#+end_src

** IMPORTANT PROGRAMS TO LOAD FIRST
*** Elpaca Package Manager
Installing Elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.9)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1 :inherit ignore
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						    ,@(when-let* ((depth (plist-get order :depth)))
							(list (format "--depth=%d" depth) "--no-single-branch"))
						    ,(plist-get order :repo) ,repo))))
		    ((zerop (call-process "git" nil buffer t "checkout"
					  (or (plist-get order :ref) "--"))))
		    (emacs (concat invocation-directory invocation-name))
		    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					  "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		    ((require 'elpaca))
		    ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+End_src

Enable the Elpaca use-package macro

#+begin_src emacs-lisp
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))
#+end_src

Wait for Elpaca to be installed
#+begin_src emacs-lisp
  (elpaca-wait)
#+end_src

*** Evil
Unsetting evil-want-keybinding
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
#+end_src

Installing Evil
#+begin_src emacs-lisp
  (use-package evil)
#+end_src

Installing Evil-Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil)
#+end_src

[[file:evil/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "evil/config.org"
    user-emacs-directory))
#+end_src

*** General
Installing General 
#+begin_src emacs-lisp
  (use-package general :demand t)
#+end_src

[[file:general/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "general/config.org"
    user-emacs-directory))
#+end_src

** NAVIGATION
Installing Helm
#+begin_src emacs-lisp
  (use-package helm)
#+end_src

Installing Helm-Rg
#+begin_src emacs-lisp
  (use-package helm-rg
    :after helm)
#+end_src

Installing Avy
#+begin_src emacs-lisp
  (use-package avy)
#+end_src

[[file:navigation/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "navigation/config.org"
    user-emacs-directory))
#+end_src

** PROJECT
Installing Projectile
#+begin_src emacs-lisp
  (use-package projectile)
#+end_src

Installing Helm-Projectile
#+begin_src emacs-lisp
  (use-package helm-projectile
    :after (helm projectile))
#+end_src

[[file:project/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "project/config.org"
    user-emacs-directory))
#+end_src

** LSP
Installing Lsp-Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred))
#+end_src

Installing Company
#+begin_src emacs-lisp
  (use-package company)
#+end_src

Installing Helm-Xref
#+begin_src emacs-lisp
  (use-package helm-xref
    :after helm)
#+end_src

Installing Helm-Lsp
#+begin_src emacs-lisp
  (use-package helm-lsp
    :after (helm lsp-mode))
#+end_src

Installing Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

Installing Format-All
#+begin_src emacs-lisp
  (use-package format-all)
#+end_src

Installing Flycheck
#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

Installing Helm-Flycheck
#+begin_src emacs-lisp
  (use-package helm-flycheck
    :after (helm flycheck))
#+end_src

Installing Flycheck-Inline
#+begin_src emacs-lisp
  (use-package flycheck-inline
    :after flycheck)
#+end_src

[[file:lsp/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "lsp/config.org"
    user-emacs-directory))
#+end_src

** UTILS
Installing Evil-Surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil)
#+end_src

Installing Embrace
#+begin_src emacs-lisp
  (use-package embrace)
#+end_src

Installing Evil-Embrace
#+begin_src emacs-lisp
  (use-package evil-embrace
    :after (evil-surround embrace))
#+end_src

Intalling Evil-Commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :after evil)
#+end_src

Installing Evil-Goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :after evil)
#+end_src

Installing Vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

Installing Undo-Tree
#+begin_src emacs-lisp
  (use-package undo-tree)
#+end_src

[[file:utils/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "utils/config.org"
    user-emacs-directory))
#+end_src

** GIT
Installing Transient
#+begin_src emacs-lisp
  (use-package transient)
#+end_src

Installing Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

Installing Git-Gutter
#+begin_src emacs-lisp
  (use-package git-gutter)
#+end_src

[[file:git/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "git/config.org"
    user-emacs-directory))
#+end_src

** VISUALS
Installing Doom-Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config (load-theme 'doom-palenight t))
#+end_src

Installing Dimmer
#+begin_src emacs-lisp
  (use-package dimmer)
#+end_src

Installing Telephone Line
#+begin_src emacs-lisp
  (use-package telephone-line)
#+end_src

Installing Visual-Fill-Column
#+begin_src emacs-lisp
  (use-package visual-fill-column)
#+end_src

[[file:visuals/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "visuals/config.org"
    user-emacs-directory))
#+end_src

** ORG
Installing Toc-Org
#+begin_src emacs-lisp
  (use-package toc-org
    :after org)
#+end_src

Installing Org-Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org)
#+end_src

Installing Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :after org)
#+end_src

Installing Org-Download
Org-Download
#+begin_src emacs-lisp
  (use-package org-download)
#+end_src

[[file:org/config.org][Configuration]]
#+begin_src emacs-lisp
  (org-babel-load-file
   (expand-file-name
    "org/config.org"
    user-emacs-directory))
#+end_src

