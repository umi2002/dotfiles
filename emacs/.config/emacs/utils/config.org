#+TITLE: Utils config
#+AUTHOR: umi

* UTILS CONFIG
** Evil-Surround
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-surround
    (global-evil-surround-mode 1))
#+end_src

** Evil-Embrace
Setup
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-embrace
    (evil-embrace-enable-evil-surround-integration))
#+end_src

Mappings
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-embrace
    (general-create-definer surround
      :keymaps '(global override)
      :wrapping leader
      :infix "s")

    (surround
      "r" 'evil-embrace-evil-surround-change)
    )
#+end_src

** Evil-Commentary
Setup
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-commentary
    (evil-commentary-mode))
#+end_src

** Evil-Goggles
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-goggles
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.500)
    )
#+end_src

#+RESULTS:
: 0.5

** Vterm
Functions
#+begin_src emacs-lisp
  (defun toggle_vterm ()
    "Toggle between vterm and current buffer."
    (interactive)
    (if (string= major-mode "vterm-mode")
	(evil-switch-to-windows-last-buffer)
      (if (get-buffer "vterm")
	  (switch-to-buffer "vterm")
	(vterm))))
#+end_src

#+RESULTS:
: toggle_vterm

Mappings
#+begin_src emacs-lisp
  (with-eval-after-load 'vterm
    (leader
      "`" 'toggle_vterm)
    )
#+end_src

#+RESULTS:

** Toc-Org
#+begin_src emacs-lisp
  (with-eval-after-load 'toc-org
    (if (require 'toc-org nil t)
	(progn
	  (add-hook 'org-mode-hook 'toc-org-mode)

	  ;; enable in markdown, too
	  (add-hook 'markdown-mode-hook 'toc-org-mode)
	  (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))
      (warn "toc-org not found"))
  
    )
#+end_src
