#+TITLE: Lsp config
#+AUTHOR: umi
#+STARTUP: overview

* LSP-MODE
** Installation

#+begin_src emacs-lisp
  (use-package lsp-mode)
#+end_src

** Config
*** Setup

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      lsp-idle-delay 0.1)
#+end_src

* HELM-LSP
** Installation

#+begin_src emacs-lisp
  (use-package helm-lsp
  :after helm)
#+end_src

* HELP-XREF
** Installation

#+begin_src emacs-lisp
(use-package helm-xref
:after helm)
#+end_src

* FLYCHECK
** Installation

#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

* AUTO-FORMATTING FUNCITON

#+begin_src emacs-lisp
      (defun format-on-save (format-function)
  (add-hook 'before-save-hook
  (lambda ()
  (funcall format-function))) nil t)
#+end_src

* LANGUAGES
** C
*** Lsp-mode

#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
(add-hook 'c-mode-hook 'lsp))
#+end_src emacs-lisp

*** Formattting

#+begin_src emacs-lisp
    (use-package clang-format)

    (with-eval-after-load 'clang-format
    (setq clang-format-fallback-style "Google")
  (add-hook 'c-mode-hook (lambda () (format-on-save 'clang-format-buffer))))
#+end_src

** C++
*** Lsp-mode

#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
(add-hook 'c++-mode-hook 'lsp))
#+end_src
